// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ServerPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ProductLine;

public final class ServerPrxHelper extends Ice.ObjectPrxHelperBase implements ServerPrx
{
    public void
    changeAvatar(String username, byte[] avatar)
    {
        changeAvatar(username, avatar, null, false);
    }

    public void
    changeAvatar(String username, byte[] avatar, java.util.Map<String, String> __ctx)
    {
        changeAvatar(username, avatar, __ctx, true);
    }

    private void
    changeAvatar(String username, byte[] avatar, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.changeAvatar(username, avatar, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __changeAvatar_name = "changeAvatar";

    public Ice.AsyncResult begin_changeAvatar(String username, byte[] avatar)
    {
        return begin_changeAvatar(username, avatar, null, false, null);
    }

    public Ice.AsyncResult begin_changeAvatar(String username, byte[] avatar, java.util.Map<String, String> __ctx)
    {
        return begin_changeAvatar(username, avatar, __ctx, true, null);
    }

    public Ice.AsyncResult begin_changeAvatar(String username, byte[] avatar, Ice.Callback __cb)
    {
        return begin_changeAvatar(username, avatar, null, false, __cb);
    }

    public Ice.AsyncResult begin_changeAvatar(String username, byte[] avatar, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeAvatar(username, avatar, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_changeAvatar(String username, byte[] avatar, Callback_Server_changeAvatar __cb)
    {
        return begin_changeAvatar(username, avatar, null, false, __cb);
    }

    public Ice.AsyncResult begin_changeAvatar(String username, byte[] avatar, java.util.Map<String, String> __ctx, Callback_Server_changeAvatar __cb)
    {
        return begin_changeAvatar(username, avatar, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changeAvatar(String username, byte[] avatar, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changeAvatar_name, __cb);
        try
        {
            __result.__prepare(__changeAvatar_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(username);
            ImageHelper.write(__os, avatar);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_changeAvatar(Ice.AsyncResult __result)
    {
        __end(__result, __changeAvatar_name);
    }

    public void
    changeEmail(String username, String email, String password)
        throws InvalidLoggingException
    {
        changeEmail(username, email, password, null, false);
    }

    public void
    changeEmail(String username, String email, String password, java.util.Map<String, String> __ctx)
        throws InvalidLoggingException
    {
        changeEmail(username, email, password, __ctx, true);
    }

    private void
    changeEmail(String username, String email, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidLoggingException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("changeEmail");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.changeEmail(username, email, password, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __changeEmail_name = "changeEmail";

    public Ice.AsyncResult begin_changeEmail(String username, String email, String password)
    {
        return begin_changeEmail(username, email, password, null, false, null);
    }

    public Ice.AsyncResult begin_changeEmail(String username, String email, String password, java.util.Map<String, String> __ctx)
    {
        return begin_changeEmail(username, email, password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_changeEmail(String username, String email, String password, Ice.Callback __cb)
    {
        return begin_changeEmail(username, email, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_changeEmail(String username, String email, String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeEmail(username, email, password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_changeEmail(String username, String email, String password, Callback_Server_changeEmail __cb)
    {
        return begin_changeEmail(username, email, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_changeEmail(String username, String email, String password, java.util.Map<String, String> __ctx, Callback_Server_changeEmail __cb)
    {
        return begin_changeEmail(username, email, password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changeEmail(String username, String email, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changeEmail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changeEmail_name, __cb);
        try
        {
            __result.__prepare(__changeEmail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(username);
            __os.writeString(email);
            __os.writeString(password);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_changeEmail(Ice.AsyncResult __result)
        throws InvalidLoggingException
    {
        Ice.AsyncResult.__check(__result, this, __changeEmail_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(InvalidLoggingException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    changeName(String username, String name, String lastname, String password)
        throws InvalidLoggingException
    {
        changeName(username, name, lastname, password, null, false);
    }

    public void
    changeName(String username, String name, String lastname, String password, java.util.Map<String, String> __ctx)
        throws InvalidLoggingException
    {
        changeName(username, name, lastname, password, __ctx, true);
    }

    private void
    changeName(String username, String name, String lastname, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidLoggingException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("changeName");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.changeName(username, name, lastname, password, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __changeName_name = "changeName";

    public Ice.AsyncResult begin_changeName(String username, String name, String lastname, String password)
    {
        return begin_changeName(username, name, lastname, password, null, false, null);
    }

    public Ice.AsyncResult begin_changeName(String username, String name, String lastname, String password, java.util.Map<String, String> __ctx)
    {
        return begin_changeName(username, name, lastname, password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_changeName(String username, String name, String lastname, String password, Ice.Callback __cb)
    {
        return begin_changeName(username, name, lastname, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_changeName(String username, String name, String lastname, String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeName(username, name, lastname, password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_changeName(String username, String name, String lastname, String password, Callback_Server_changeName __cb)
    {
        return begin_changeName(username, name, lastname, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_changeName(String username, String name, String lastname, String password, java.util.Map<String, String> __ctx, Callback_Server_changeName __cb)
    {
        return begin_changeName(username, name, lastname, password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changeName(String username, String name, String lastname, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changeName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changeName_name, __cb);
        try
        {
            __result.__prepare(__changeName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(username);
            __os.writeString(name);
            __os.writeString(lastname);
            __os.writeString(password);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_changeName(Ice.AsyncResult __result)
        throws InvalidLoggingException
    {
        Ice.AsyncResult.__check(__result, this, __changeName_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(InvalidLoggingException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    changePassword(String username, String password, String newPassword)
        throws InvalidLoggingException
    {
        changePassword(username, password, newPassword, null, false);
    }

    public void
    changePassword(String username, String password, String newPassword, java.util.Map<String, String> __ctx)
        throws InvalidLoggingException
    {
        changePassword(username, password, newPassword, __ctx, true);
    }

    private void
    changePassword(String username, String password, String newPassword, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidLoggingException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("changePassword");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.changePassword(username, password, newPassword, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __changePassword_name = "changePassword";

    public Ice.AsyncResult begin_changePassword(String username, String password, String newPassword)
    {
        return begin_changePassword(username, password, newPassword, null, false, null);
    }

    public Ice.AsyncResult begin_changePassword(String username, String password, String newPassword, java.util.Map<String, String> __ctx)
    {
        return begin_changePassword(username, password, newPassword, __ctx, true, null);
    }

    public Ice.AsyncResult begin_changePassword(String username, String password, String newPassword, Ice.Callback __cb)
    {
        return begin_changePassword(username, password, newPassword, null, false, __cb);
    }

    public Ice.AsyncResult begin_changePassword(String username, String password, String newPassword, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changePassword(username, password, newPassword, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_changePassword(String username, String password, String newPassword, Callback_Server_changePassword __cb)
    {
        return begin_changePassword(username, password, newPassword, null, false, __cb);
    }

    public Ice.AsyncResult begin_changePassword(String username, String password, String newPassword, java.util.Map<String, String> __ctx, Callback_Server_changePassword __cb)
    {
        return begin_changePassword(username, password, newPassword, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changePassword(String username, String password, String newPassword, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changePassword_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changePassword_name, __cb);
        try
        {
            __result.__prepare(__changePassword_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(username);
            __os.writeString(password);
            __os.writeString(newPassword);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_changePassword(Ice.AsyncResult __result)
        throws InvalidLoggingException
    {
        Ice.AsyncResult.__check(__result, this, __changePassword_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(InvalidLoggingException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    createGame(String user, String gameName, GameType type)
    {
        createGame(user, gameName, type, null, false);
    }

    public void
    createGame(String user, String gameName, GameType type, java.util.Map<String, String> __ctx)
    {
        createGame(user, gameName, type, __ctx, true);
    }

    private void
    createGame(String user, String gameName, GameType type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.createGame(user, gameName, type, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __createGame_name = "createGame";

    public Ice.AsyncResult begin_createGame(String user, String gameName, GameType type)
    {
        return begin_createGame(user, gameName, type, null, false, null);
    }

    public Ice.AsyncResult begin_createGame(String user, String gameName, GameType type, java.util.Map<String, String> __ctx)
    {
        return begin_createGame(user, gameName, type, __ctx, true, null);
    }

    public Ice.AsyncResult begin_createGame(String user, String gameName, GameType type, Ice.Callback __cb)
    {
        return begin_createGame(user, gameName, type, null, false, __cb);
    }

    public Ice.AsyncResult begin_createGame(String user, String gameName, GameType type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createGame(user, gameName, type, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_createGame(String user, String gameName, GameType type, Callback_Server_createGame __cb)
    {
        return begin_createGame(user, gameName, type, null, false, __cb);
    }

    public Ice.AsyncResult begin_createGame(String user, String gameName, GameType type, java.util.Map<String, String> __ctx, Callback_Server_createGame __cb)
    {
        return begin_createGame(user, gameName, type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_createGame(String user, String gameName, GameType type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __createGame_name, __cb);
        try
        {
            __result.__prepare(__createGame_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(user);
            __os.writeString(gameName);
            type.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_createGame(Ice.AsyncResult __result)
    {
        __end(__result, __createGame_name);
    }

    public void
    deleteAccount(String username, String password)
        throws InvalidLoggingException
    {
        deleteAccount(username, password, null, false);
    }

    public void
    deleteAccount(String username, String password, java.util.Map<String, String> __ctx)
        throws InvalidLoggingException
    {
        deleteAccount(username, password, __ctx, true);
    }

    private void
    deleteAccount(String username, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidLoggingException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deleteAccount");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.deleteAccount(username, password, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __deleteAccount_name = "deleteAccount";

    public Ice.AsyncResult begin_deleteAccount(String username, String password)
    {
        return begin_deleteAccount(username, password, null, false, null);
    }

    public Ice.AsyncResult begin_deleteAccount(String username, String password, java.util.Map<String, String> __ctx)
    {
        return begin_deleteAccount(username, password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_deleteAccount(String username, String password, Ice.Callback __cb)
    {
        return begin_deleteAccount(username, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteAccount(String username, String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteAccount(username, password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_deleteAccount(String username, String password, Callback_Server_deleteAccount __cb)
    {
        return begin_deleteAccount(username, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteAccount(String username, String password, java.util.Map<String, String> __ctx, Callback_Server_deleteAccount __cb)
    {
        return begin_deleteAccount(username, password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteAccount(String username, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteAccount_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteAccount_name, __cb);
        try
        {
            __result.__prepare(__deleteAccount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(username);
            __os.writeString(password);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_deleteAccount(Ice.AsyncResult __result)
        throws InvalidLoggingException
    {
        Ice.AsyncResult.__check(__result, this, __deleteAccount_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(InvalidLoggingException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public java.util.List<User>
    listUsers(String username)
    {
        return listUsers(username, null, false);
    }

    public java.util.List<User>
    listUsers(String username, java.util.Map<String, String> __ctx)
    {
        return listUsers(username, __ctx, true);
    }

    private java.util.List<User>
    listUsers(String username, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("listUsers");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                return __del.listUsers(username, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __listUsers_name = "listUsers";

    public Ice.AsyncResult begin_listUsers(String username)
    {
        return begin_listUsers(username, null, false, null);
    }

    public Ice.AsyncResult begin_listUsers(String username, java.util.Map<String, String> __ctx)
    {
        return begin_listUsers(username, __ctx, true, null);
    }

    public Ice.AsyncResult begin_listUsers(String username, Ice.Callback __cb)
    {
        return begin_listUsers(username, null, false, __cb);
    }

    public Ice.AsyncResult begin_listUsers(String username, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_listUsers(username, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_listUsers(String username, Callback_Server_listUsers __cb)
    {
        return begin_listUsers(username, null, false, __cb);
    }

    public Ice.AsyncResult begin_listUsers(String username, java.util.Map<String, String> __ctx, Callback_Server_listUsers __cb)
    {
        return begin_listUsers(username, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_listUsers(String username, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__listUsers_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __listUsers_name, __cb);
        try
        {
            __result.__prepare(__listUsers_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(username);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<User> end_listUsers(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __listUsers_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.List<User> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = UserListHelper.read(__is);
        __is.readPendingObjects();
        __is.endReadEncaps();
        return __ret;
    }

    public User
    loginUser(String username, String password, Ice.Identity client)
        throws InvalidLoggingException,
               UserAlreadyLoggedException
    {
        return loginUser(username, password, client, null, false);
    }

    public User
    loginUser(String username, String password, Ice.Identity client, java.util.Map<String, String> __ctx)
        throws InvalidLoggingException,
               UserAlreadyLoggedException
    {
        return loginUser(username, password, client, __ctx, true);
    }

    private User
    loginUser(String username, String password, Ice.Identity client, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InvalidLoggingException,
               UserAlreadyLoggedException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("loginUser");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                return __del.loginUser(username, password, client, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __loginUser_name = "loginUser";

    public Ice.AsyncResult begin_loginUser(String username, String password, Ice.Identity client)
    {
        return begin_loginUser(username, password, client, null, false, null);
    }

    public Ice.AsyncResult begin_loginUser(String username, String password, Ice.Identity client, java.util.Map<String, String> __ctx)
    {
        return begin_loginUser(username, password, client, __ctx, true, null);
    }

    public Ice.AsyncResult begin_loginUser(String username, String password, Ice.Identity client, Ice.Callback __cb)
    {
        return begin_loginUser(username, password, client, null, false, __cb);
    }

    public Ice.AsyncResult begin_loginUser(String username, String password, Ice.Identity client, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_loginUser(username, password, client, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_loginUser(String username, String password, Ice.Identity client, Callback_Server_loginUser __cb)
    {
        return begin_loginUser(username, password, client, null, false, __cb);
    }

    public Ice.AsyncResult begin_loginUser(String username, String password, Ice.Identity client, java.util.Map<String, String> __ctx, Callback_Server_loginUser __cb)
    {
        return begin_loginUser(username, password, client, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_loginUser(String username, String password, Ice.Identity client, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__loginUser_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __loginUser_name, __cb);
        try
        {
            __result.__prepare(__loginUser_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(username);
            __os.writeString(password);
            client.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public User end_loginUser(Ice.AsyncResult __result)
        throws InvalidLoggingException,
               UserAlreadyLoggedException
    {
        Ice.AsyncResult.__check(__result, this, __loginUser_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(InvalidLoggingException __ex)
            {
                throw __ex;
            }
            catch(UserAlreadyLoggedException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        UserHolder __ret = new UserHolder();
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __is.readObject(__ret);
        __is.readPendingObjects();
        __is.endReadEncaps();
        return __ret.value;
    }

    public void
    logoutUser(String username)
        throws UserNotLoggedException
    {
        logoutUser(username, null, false);
    }

    public void
    logoutUser(String username, java.util.Map<String, String> __ctx)
        throws UserNotLoggedException
    {
        logoutUser(username, __ctx, true);
    }

    private void
    logoutUser(String username, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UserNotLoggedException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("logoutUser");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.logoutUser(username, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __logoutUser_name = "logoutUser";

    public Ice.AsyncResult begin_logoutUser(String username)
    {
        return begin_logoutUser(username, null, false, null);
    }

    public Ice.AsyncResult begin_logoutUser(String username, java.util.Map<String, String> __ctx)
    {
        return begin_logoutUser(username, __ctx, true, null);
    }

    public Ice.AsyncResult begin_logoutUser(String username, Ice.Callback __cb)
    {
        return begin_logoutUser(username, null, false, __cb);
    }

    public Ice.AsyncResult begin_logoutUser(String username, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_logoutUser(username, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_logoutUser(String username, Callback_Server_logoutUser __cb)
    {
        return begin_logoutUser(username, null, false, __cb);
    }

    public Ice.AsyncResult begin_logoutUser(String username, java.util.Map<String, String> __ctx, Callback_Server_logoutUser __cb)
    {
        return begin_logoutUser(username, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_logoutUser(String username, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__logoutUser_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __logoutUser_name, __cb);
        try
        {
            __result.__prepare(__logoutUser_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(username);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_logoutUser(Ice.AsyncResult __result)
        throws UserNotLoggedException
    {
        Ice.AsyncResult.__check(__result, this, __logoutUser_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(UserNotLoggedException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    probar(Game prof)
    {
        probar(prof, null, false);
    }

    public void
    probar(Game prof, java.util.Map<String, String> __ctx)
    {
        probar(prof, __ctx, true);
    }

    private void
    probar(Game prof, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.probar(prof, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __probar_name = "probar";

    public Ice.AsyncResult begin_probar(Game prof)
    {
        return begin_probar(prof, null, false, null);
    }

    public Ice.AsyncResult begin_probar(Game prof, java.util.Map<String, String> __ctx)
    {
        return begin_probar(prof, __ctx, true, null);
    }

    public Ice.AsyncResult begin_probar(Game prof, Ice.Callback __cb)
    {
        return begin_probar(prof, null, false, __cb);
    }

    public Ice.AsyncResult begin_probar(Game prof, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_probar(prof, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_probar(Game prof, Callback_Server_probar __cb)
    {
        return begin_probar(prof, null, false, __cb);
    }

    public Ice.AsyncResult begin_probar(Game prof, java.util.Map<String, String> __ctx, Callback_Server_probar __cb)
    {
        return begin_probar(prof, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_probar(Game prof, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __probar_name, __cb);
        try
        {
            __result.__prepare(__probar_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeObject(prof);
            __os.writePendingObjects();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_probar(Ice.AsyncResult __result)
    {
        __end(__result, __probar_name);
    }

    public void
    registerUser(User newUser)
        throws UserAlreadyExistsException
    {
        registerUser(newUser, null, false);
    }

    public void
    registerUser(User newUser, java.util.Map<String, String> __ctx)
        throws UserAlreadyExistsException
    {
        registerUser(newUser, __ctx, true);
    }

    private void
    registerUser(User newUser, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UserAlreadyExistsException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("registerUser");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.registerUser(newUser, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __registerUser_name = "registerUser";

    public Ice.AsyncResult begin_registerUser(User newUser)
    {
        return begin_registerUser(newUser, null, false, null);
    }

    public Ice.AsyncResult begin_registerUser(User newUser, java.util.Map<String, String> __ctx)
    {
        return begin_registerUser(newUser, __ctx, true, null);
    }

    public Ice.AsyncResult begin_registerUser(User newUser, Ice.Callback __cb)
    {
        return begin_registerUser(newUser, null, false, __cb);
    }

    public Ice.AsyncResult begin_registerUser(User newUser, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_registerUser(newUser, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_registerUser(User newUser, Callback_Server_registerUser __cb)
    {
        return begin_registerUser(newUser, null, false, __cb);
    }

    public Ice.AsyncResult begin_registerUser(User newUser, java.util.Map<String, String> __ctx, Callback_Server_registerUser __cb)
    {
        return begin_registerUser(newUser, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_registerUser(User newUser, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__registerUser_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __registerUser_name, __cb);
        try
        {
            __result.__prepare(__registerUser_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeObject(newUser);
            __os.writePendingObjects();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_registerUser(Ice.AsyncResult __result)
        throws UserAlreadyExistsException
    {
        Ice.AsyncResult.__check(__result, this, __registerUser_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(UserAlreadyExistsException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    sendGameMessage(String game, String sender, String message)
    {
        sendGameMessage(game, sender, message, null, false);
    }

    public void
    sendGameMessage(String game, String sender, String message, java.util.Map<String, String> __ctx)
    {
        sendGameMessage(game, sender, message, __ctx, true);
    }

    private void
    sendGameMessage(String game, String sender, String message, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.sendGameMessage(game, sender, message, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __sendGameMessage_name = "sendGameMessage";

    public Ice.AsyncResult begin_sendGameMessage(String game, String sender, String message)
    {
        return begin_sendGameMessage(game, sender, message, null, false, null);
    }

    public Ice.AsyncResult begin_sendGameMessage(String game, String sender, String message, java.util.Map<String, String> __ctx)
    {
        return begin_sendGameMessage(game, sender, message, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendGameMessage(String game, String sender, String message, Ice.Callback __cb)
    {
        return begin_sendGameMessage(game, sender, message, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendGameMessage(String game, String sender, String message, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendGameMessage(game, sender, message, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendGameMessage(String game, String sender, String message, Callback_Server_sendGameMessage __cb)
    {
        return begin_sendGameMessage(game, sender, message, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendGameMessage(String game, String sender, String message, java.util.Map<String, String> __ctx, Callback_Server_sendGameMessage __cb)
    {
        return begin_sendGameMessage(game, sender, message, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendGameMessage(String game, String sender, String message, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendGameMessage_name, __cb);
        try
        {
            __result.__prepare(__sendGameMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(game);
            __os.writeString(sender);
            __os.writeString(message);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendGameMessage(Ice.AsyncResult __result)
    {
        __end(__result, __sendGameMessage_name);
    }

    public void
    sendGeneralMessage(String sender, String message)
    {
        sendGeneralMessage(sender, message, null, false);
    }

    public void
    sendGeneralMessage(String sender, String message, java.util.Map<String, String> __ctx)
    {
        sendGeneralMessage(sender, message, __ctx, true);
    }

    private void
    sendGeneralMessage(String sender, String message, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.sendGeneralMessage(sender, message, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __sendGeneralMessage_name = "sendGeneralMessage";

    public Ice.AsyncResult begin_sendGeneralMessage(String sender, String message)
    {
        return begin_sendGeneralMessage(sender, message, null, false, null);
    }

    public Ice.AsyncResult begin_sendGeneralMessage(String sender, String message, java.util.Map<String, String> __ctx)
    {
        return begin_sendGeneralMessage(sender, message, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendGeneralMessage(String sender, String message, Ice.Callback __cb)
    {
        return begin_sendGeneralMessage(sender, message, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendGeneralMessage(String sender, String message, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendGeneralMessage(sender, message, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendGeneralMessage(String sender, String message, Callback_Server_sendGeneralMessage __cb)
    {
        return begin_sendGeneralMessage(sender, message, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendGeneralMessage(String sender, String message, java.util.Map<String, String> __ctx, Callback_Server_sendGeneralMessage __cb)
    {
        return begin_sendGeneralMessage(sender, message, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendGeneralMessage(String sender, String message, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendGeneralMessage_name, __cb);
        try
        {
            __result.__prepare(__sendGeneralMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(sender);
            __os.writeString(message);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendGeneralMessage(Ice.AsyncResult __result)
    {
        __end(__result, __sendGeneralMessage_name);
    }

    public void
    sendPrivateMessage(String sender, String destinatary, String message)
        throws UserNotLoggedException
    {
        sendPrivateMessage(sender, destinatary, message, null, false);
    }

    public void
    sendPrivateMessage(String sender, String destinatary, String message, java.util.Map<String, String> __ctx)
        throws UserNotLoggedException
    {
        sendPrivateMessage(sender, destinatary, message, __ctx, true);
    }

    private void
    sendPrivateMessage(String sender, String destinatary, String message, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UserNotLoggedException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("sendPrivateMessage");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.sendPrivateMessage(sender, destinatary, message, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __sendPrivateMessage_name = "sendPrivateMessage";

    public Ice.AsyncResult begin_sendPrivateMessage(String sender, String destinatary, String message)
    {
        return begin_sendPrivateMessage(sender, destinatary, message, null, false, null);
    }

    public Ice.AsyncResult begin_sendPrivateMessage(String sender, String destinatary, String message, java.util.Map<String, String> __ctx)
    {
        return begin_sendPrivateMessage(sender, destinatary, message, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendPrivateMessage(String sender, String destinatary, String message, Ice.Callback __cb)
    {
        return begin_sendPrivateMessage(sender, destinatary, message, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendPrivateMessage(String sender, String destinatary, String message, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendPrivateMessage(sender, destinatary, message, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendPrivateMessage(String sender, String destinatary, String message, Callback_Server_sendPrivateMessage __cb)
    {
        return begin_sendPrivateMessage(sender, destinatary, message, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendPrivateMessage(String sender, String destinatary, String message, java.util.Map<String, String> __ctx, Callback_Server_sendPrivateMessage __cb)
    {
        return begin_sendPrivateMessage(sender, destinatary, message, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendPrivateMessage(String sender, String destinatary, String message, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendPrivateMessage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendPrivateMessage_name, __cb);
        try
        {
            __result.__prepare(__sendPrivateMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(sender);
            __os.writeString(destinatary);
            __os.writeString(message);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_sendPrivateMessage(Ice.AsyncResult __result)
        throws UserNotLoggedException
    {
        Ice.AsyncResult.__check(__result, this, __sendPrivateMessage_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(UserNotLoggedException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public static ServerPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ServerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServerPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ServerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServerPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServerPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServerPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ServerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                ServerPrxHelper __h = new ServerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ServerPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ServerPrxHelper __h = new ServerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::ProductLine::Server"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _ServerDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _ServerDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, ServerPrx v)
    {
        __os.writeProxy(v);
    }

    public static ServerPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ServerPrxHelper result = new ServerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
