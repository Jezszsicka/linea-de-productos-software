// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ProductLine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IServer
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class genericException : Ice.UserException
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string reason;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public genericException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public genericException(_System.Exception ex__) : base(ex__)
        {
        }

        private void initDM__(string reason)
        {
            this.reason = reason;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public genericException(string reason)
        {
            initDM__(reason);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public genericException(string reason, _System.Exception ex__) : base(ex__)
        {
            initDM__(reason);
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "IServer::genericException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            if(reason != null)
            {
                h__ = 5 * h__ + reason.GetHashCode();
            }
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            genericException o__ = other__ as genericException;
            if(o__ == null)
            {
                return false;
            }
            if(reason == null)
            {
                if(o__.reason != null)
                {
                    return false;
                }
            }
            else
            {
                if(!reason.Equals(o__.reason))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(genericException lhs__, genericException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(genericException lhs__, genericException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::IServer::genericException");
            os__.startWriteSlice();
            os__.writeString(reason);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            reason = is__.readString();
            is__.endReadSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception IServer::genericException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception IServer::genericException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class UserAlreadyLoggedException : IServer.genericException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public UserAlreadyLoggedException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public UserAlreadyLoggedException(_System.Exception ex__) : base(ex__)
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public UserAlreadyLoggedException(string reason) : base(reason)
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public UserAlreadyLoggedException(string reason, _System.Exception ex__) : base(reason, ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "IServer::UserAlreadyLoggedException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            UserAlreadyLoggedException o__ = other__ as UserAlreadyLoggedException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(UserAlreadyLoggedException lhs__, UserAlreadyLoggedException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(UserAlreadyLoggedException lhs__, UserAlreadyLoggedException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::IServer::UserAlreadyLoggedException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception IServer::UserAlreadyLoggedException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception IServer::UserAlreadyLoggedException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class UserNotLoggedException : IServer.genericException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public UserNotLoggedException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public UserNotLoggedException(_System.Exception ex__) : base(ex__)
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public UserNotLoggedException(string reason) : base(reason)
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public UserNotLoggedException(string reason, _System.Exception ex__) : base(reason, ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "IServer::UserNotLoggedException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            UserNotLoggedException o__ = other__ as UserNotLoggedException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(UserNotLoggedException lhs__, UserNotLoggedException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(UserNotLoggedException lhs__, UserNotLoggedException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::IServer::UserNotLoggedException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception IServer::UserNotLoggedException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception IServer::UserNotLoggedException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class UserAlreadyExistsException : IServer.genericException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public UserAlreadyExistsException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public UserAlreadyExistsException(_System.Exception ex__) : base(ex__)
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public UserAlreadyExistsException(string reason) : base(reason)
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public UserAlreadyExistsException(string reason, _System.Exception ex__) : base(reason, ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "IServer::UserAlreadyExistsException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            UserAlreadyExistsException o__ = other__ as UserAlreadyExistsException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(UserAlreadyExistsException lhs__, UserAlreadyExistsException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(UserAlreadyExistsException lhs__, UserAlreadyExistsException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::IServer::UserAlreadyExistsException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception IServer::UserAlreadyExistsException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception IServer::UserAlreadyExistsException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InvalidLoggingException : IServer.genericException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidLoggingException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidLoggingException(_System.Exception ex__) : base(ex__)
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidLoggingException(string reason) : base(reason)
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public InvalidLoggingException(string reason, _System.Exception ex__) : base(reason, ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override string ice_name()
        {
            return "IServer::InvalidLoggingException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            InvalidLoggingException o__ = other__ as InvalidLoggingException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(InvalidLoggingException lhs__, InvalidLoggingException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(InvalidLoggingException lhs__, InvalidLoggingException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::IServer::InvalidLoggingException");
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception IServer::InvalidLoggingException was not generated with stream support";
            throw ex;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception IServer::InvalidLoggingException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Server : Ice.Object, ServerOperations_, ServerOperationsNC_
    {
    }
}

namespace IClient
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Client : Ice.Object, ClientOperations_, ClientOperationsNC_
    {
    }
}

namespace IServer
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_registerUser();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_loginUser();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_logoutUser();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_sendPrivateMessage();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_sendMessage();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Server_chatParticipants(string[] ret__);
}

namespace IClient
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Client_saludo();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Client_receiveMessage();
}

namespace IServer
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerPrx : Ice.ObjectPrx
    {
        void registerUser(string username, string password, string email);
        void registerUser(string username, string password, string email, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<IServer.Callback_Server_registerUser> begin_registerUser(string username, string password, string email);
        Ice.AsyncResult<IServer.Callback_Server_registerUser> begin_registerUser(string username, string password, string email, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_registerUser(string username, string password, string email, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_registerUser(string username, string password, string email, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_registerUser(Ice.AsyncResult r__);

        void loginUser(string username, string password, Ice.Identity client);
        void loginUser(string username, string password, Ice.Identity client, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<IServer.Callback_Server_loginUser> begin_loginUser(string username, string password, Ice.Identity client);
        Ice.AsyncResult<IServer.Callback_Server_loginUser> begin_loginUser(string username, string password, Ice.Identity client, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_loginUser(string username, string password, Ice.Identity client, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_loginUser(string username, string password, Ice.Identity client, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_loginUser(Ice.AsyncResult r__);

        void logoutUser(string username);
        void logoutUser(string username, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<IServer.Callback_Server_logoutUser> begin_logoutUser(string username);
        Ice.AsyncResult<IServer.Callback_Server_logoutUser> begin_logoutUser(string username, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_logoutUser(string username, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_logoutUser(string username, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_logoutUser(Ice.AsyncResult r__);

        void sendPrivateMessage(string sender, string destinatary, string message);
        void sendPrivateMessage(string sender, string destinatary, string message, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<IServer.Callback_Server_sendPrivateMessage> begin_sendPrivateMessage(string sender, string destinatary, string message);
        Ice.AsyncResult<IServer.Callback_Server_sendPrivateMessage> begin_sendPrivateMessage(string sender, string destinatary, string message, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_sendPrivateMessage(string sender, string destinatary, string message, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_sendPrivateMessage(string sender, string destinatary, string message, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_sendPrivateMessage(Ice.AsyncResult r__);

        void sendMessage(string sender, string message);
        void sendMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<IServer.Callback_Server_sendMessage> begin_sendMessage(string sender, string message);
        Ice.AsyncResult<IServer.Callback_Server_sendMessage> begin_sendMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_sendMessage(string sender, string message, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_sendMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_sendMessage(Ice.AsyncResult r__);

        string[] chatParticipants();
        string[] chatParticipants(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<IServer.Callback_Server_chatParticipants> begin_chatParticipants();
        Ice.AsyncResult<IServer.Callback_Server_chatParticipants> begin_chatParticipants(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_chatParticipants(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_chatParticipants(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string[] end_chatParticipants(Ice.AsyncResult r__);
    }
}

namespace IClient
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ClientPrx : Ice.ObjectPrx
    {
        void saludo();
        void saludo(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<IClient.Callback_Client_saludo> begin_saludo();
        Ice.AsyncResult<IClient.Callback_Client_saludo> begin_saludo(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_saludo(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_saludo(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_saludo(Ice.AsyncResult r__);

        void receiveMessage(string sender, string message);
        void receiveMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<IClient.Callback_Client_receiveMessage> begin_receiveMessage(string sender, string message);
        Ice.AsyncResult<IClient.Callback_Client_receiveMessage> begin_receiveMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_receiveMessage(string sender, string message, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_receiveMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_receiveMessage(Ice.AsyncResult r__);
    }
}

namespace IServer
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerOperations_
    {
        void registerUser(string username, string password, string email, Ice.Current current__);

        void loginUser(string username, string password, Ice.Identity client, Ice.Current current__);

        void logoutUser(string username, Ice.Current current__);

        void sendPrivateMessage(string sender, string destinatary, string message, Ice.Current current__);

        void sendMessage(string sender, string message, Ice.Current current__);

        string[] chatParticipants(Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerOperationsNC_
    {
        void registerUser(string username, string password, string email);

        void loginUser(string username, string password, Ice.Identity client);

        void logoutUser(string username);

        void sendPrivateMessage(string sender, string destinatary, string message);

        void sendMessage(string sender, string message);

        string[] chatParticipants();
    }
}

namespace IClient
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ClientOperations_
    {
        void saludo(Ice.Current current__);

        void receiveMessage(string sender, string message, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ClientOperationsNC_
    {
        void saludo();

        void receiveMessage(string sender, string message);
    }
}

namespace IServer
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class StringSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, string[] v__)
        {
            os__.writeStringSeq(v__);
        }

        public static string[] read(IceInternal.BasicStream is__)
        {
            string[] v__;
            v__ = is__.readStringSeq();
            return v__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerPrxHelper : Ice.ObjectPrxHelperBase, ServerPrx
    {
        #region Synchronous operations

        public string[] chatParticipants()
        {
            return chatParticipants(null, false);
        }

        public string[] chatParticipants(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return chatParticipants(context__, true);
        }

        private string[] chatParticipants(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("chatParticipants");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    return del__.chatParticipants(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void loginUser(string username, string password, Ice.Identity client)
        {
            loginUser(username, password, client, null, false);
        }

        public void loginUser(string username, string password, Ice.Identity client, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            loginUser(username, password, client, context__, true);
        }

        private void loginUser(string username, string password, Ice.Identity client, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("loginUser");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.loginUser(username, password, client, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void logoutUser(string username)
        {
            logoutUser(username, null, false);
        }

        public void logoutUser(string username, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            logoutUser(username, context__, true);
        }

        private void logoutUser(string username, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("logoutUser");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.logoutUser(username, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void registerUser(string username, string password, string email)
        {
            registerUser(username, password, email, null, false);
        }

        public void registerUser(string username, string password, string email, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            registerUser(username, password, email, context__, true);
        }

        private void registerUser(string username, string password, string email, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("registerUser");
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.registerUser(username, password, email, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void sendMessage(string sender, string message)
        {
            sendMessage(sender, message, null, false);
        }

        public void sendMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            sendMessage(sender, message, context__, true);
        }

        private void sendMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.sendMessage(sender, message, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void sendPrivateMessage(string sender, string destinatary, string message)
        {
            sendPrivateMessage(sender, destinatary, message, null, false);
        }

        public void sendPrivateMessage(string sender, string destinatary, string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            sendPrivateMessage(sender, destinatary, message, context__, true);
        }

        private void sendPrivateMessage(string sender, string destinatary, string message, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ServerDel_ del__ = (ServerDel_)delBase__;
                    del__.sendPrivateMessage(sender, destinatary, message, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<IServer.Callback_Server_chatParticipants> begin_chatParticipants()
        {
            return begin_chatParticipants(null, false, null, null);
        }

        public Ice.AsyncResult<IServer.Callback_Server_chatParticipants> begin_chatParticipants(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_chatParticipants(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_chatParticipants(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_chatParticipants(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_chatParticipants(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_chatParticipants(ctx__, true, cb__, cookie__);
        }

        private const string __chatParticipants_name = "chatParticipants";

        public string[] end_chatParticipants(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __chatParticipants_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readStringSeq();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<IServer.Callback_Server_chatParticipants> begin_chatParticipants(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__chatParticipants_name);
            IceInternal.TwowayOutgoingAsync<IServer.Callback_Server_chatParticipants> result__ =  new IceInternal.TwowayOutgoingAsync<IServer.Callback_Server_chatParticipants>(this, __chatParticipants_name, chatParticipants_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__chatParticipants_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void chatParticipants_completed__(Ice.AsyncResult r__, IServer.Callback_Server_chatParticipants cb__, Ice.ExceptionCallback excb__)
        {
            string[] ret__;
            try
            {
                ret__ = end_chatParticipants(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<IServer.Callback_Server_loginUser> begin_loginUser(string username, string password, Ice.Identity client)
        {
            return begin_loginUser(username, password, client, null, false, null, null);
        }

        public Ice.AsyncResult<IServer.Callback_Server_loginUser> begin_loginUser(string username, string password, Ice.Identity client, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_loginUser(username, password, client, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_loginUser(string username, string password, Ice.Identity client, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_loginUser(username, password, client, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_loginUser(string username, string password, Ice.Identity client, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_loginUser(username, password, client, ctx__, true, cb__, cookie__);
        }

        private const string __loginUser_name = "loginUser";

        public void end_loginUser(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __loginUser_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(IServer.InvalidLoggingException)
                {
                    throw;
                }
                catch(IServer.UserAlreadyLoggedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<IServer.Callback_Server_loginUser> begin_loginUser(string username, string password, Ice.Identity client, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__loginUser_name);
            IceInternal.TwowayOutgoingAsync<IServer.Callback_Server_loginUser> result__ =  new IceInternal.TwowayOutgoingAsync<IServer.Callback_Server_loginUser>(this, __loginUser_name, loginUser_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__loginUser_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(username);
                os__.writeString(password);
                if(client == null)
                {
                    Ice.Identity tmp__ = new Ice.Identity();
                    tmp__.write__(os__);
                }
                else
                {
                    client.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void loginUser_completed__(Ice.AsyncResult r__, IServer.Callback_Server_loginUser cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_loginUser(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<IServer.Callback_Server_logoutUser> begin_logoutUser(string username)
        {
            return begin_logoutUser(username, null, false, null, null);
        }

        public Ice.AsyncResult<IServer.Callback_Server_logoutUser> begin_logoutUser(string username, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_logoutUser(username, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_logoutUser(string username, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_logoutUser(username, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_logoutUser(string username, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_logoutUser(username, ctx__, true, cb__, cookie__);
        }

        private const string __logoutUser_name = "logoutUser";

        public void end_logoutUser(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __logoutUser_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(IServer.UserNotLoggedException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<IServer.Callback_Server_logoutUser> begin_logoutUser(string username, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__logoutUser_name);
            IceInternal.TwowayOutgoingAsync<IServer.Callback_Server_logoutUser> result__ =  new IceInternal.TwowayOutgoingAsync<IServer.Callback_Server_logoutUser>(this, __logoutUser_name, logoutUser_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__logoutUser_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(username);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void logoutUser_completed__(Ice.AsyncResult r__, IServer.Callback_Server_logoutUser cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_logoutUser(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<IServer.Callback_Server_registerUser> begin_registerUser(string username, string password, string email)
        {
            return begin_registerUser(username, password, email, null, false, null, null);
        }

        public Ice.AsyncResult<IServer.Callback_Server_registerUser> begin_registerUser(string username, string password, string email, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_registerUser(username, password, email, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_registerUser(string username, string password, string email, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_registerUser(username, password, email, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_registerUser(string username, string password, string email, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_registerUser(username, password, email, ctx__, true, cb__, cookie__);
        }

        private const string __registerUser_name = "registerUser";

        public void end_registerUser(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __registerUser_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(IServer.UserAlreadyExistsException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<IServer.Callback_Server_registerUser> begin_registerUser(string username, string password, string email, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__registerUser_name);
            IceInternal.TwowayOutgoingAsync<IServer.Callback_Server_registerUser> result__ =  new IceInternal.TwowayOutgoingAsync<IServer.Callback_Server_registerUser>(this, __registerUser_name, registerUser_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__registerUser_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(username);
                os__.writeString(password);
                os__.writeString(email);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void registerUser_completed__(Ice.AsyncResult r__, IServer.Callback_Server_registerUser cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_registerUser(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<IServer.Callback_Server_sendMessage> begin_sendMessage(string sender, string message)
        {
            return begin_sendMessage(sender, message, null, false, null, null);
        }

        public Ice.AsyncResult<IServer.Callback_Server_sendMessage> begin_sendMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_sendMessage(sender, message, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_sendMessage(string sender, string message, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendMessage(sender, message, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_sendMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendMessage(sender, message, ctx__, true, cb__, cookie__);
        }

        private const string __sendMessage_name = "sendMessage";

        public void end_sendMessage(Ice.AsyncResult r__)
        {
            end__(r__, __sendMessage_name);
        }

        private Ice.AsyncResult<IServer.Callback_Server_sendMessage> begin_sendMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<IServer.Callback_Server_sendMessage> result__ = new IceInternal.OnewayOutgoingAsync<IServer.Callback_Server_sendMessage>(this, __sendMessage_name, sendMessage_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__sendMessage_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(sender);
                os__.writeString(message);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void sendMessage_completed__(IServer.Callback_Server_sendMessage cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<IServer.Callback_Server_sendPrivateMessage> begin_sendPrivateMessage(string sender, string destinatary, string message)
        {
            return begin_sendPrivateMessage(sender, destinatary, message, null, false, null, null);
        }

        public Ice.AsyncResult<IServer.Callback_Server_sendPrivateMessage> begin_sendPrivateMessage(string sender, string destinatary, string message, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_sendPrivateMessage(sender, destinatary, message, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_sendPrivateMessage(string sender, string destinatary, string message, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendPrivateMessage(sender, destinatary, message, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_sendPrivateMessage(string sender, string destinatary, string message, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendPrivateMessage(sender, destinatary, message, ctx__, true, cb__, cookie__);
        }

        private const string __sendPrivateMessage_name = "sendPrivateMessage";

        public void end_sendPrivateMessage(Ice.AsyncResult r__)
        {
            end__(r__, __sendPrivateMessage_name);
        }

        private Ice.AsyncResult<IServer.Callback_Server_sendPrivateMessage> begin_sendPrivateMessage(string sender, string destinatary, string message, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<IServer.Callback_Server_sendPrivateMessage> result__ = new IceInternal.OnewayOutgoingAsync<IServer.Callback_Server_sendPrivateMessage>(this, __sendPrivateMessage_name, sendPrivateMessage_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__sendPrivateMessage_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(sender);
                os__.writeString(destinatary);
                os__.writeString(message);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void sendPrivateMessage_completed__(IServer.Callback_Server_sendPrivateMessage cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ServerPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerPrx r = b as ServerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ServerPrxHelper h = new ServerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ServerPrx r = b as ServerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ServerPrxHelper h = new ServerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ServerPrxHelper h = new ServerPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ServerPrxHelper h = new ServerPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerPrx r = b as ServerPrx;
            if(r == null)
            {
                ServerPrxHelper h = new ServerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ServerPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            ServerPrxHelper h = new ServerPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::IServer::Server",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new ServerDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new ServerDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, ServerPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static ServerPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                ServerPrxHelper result = new ServerPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace IClient
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ClientPrxHelper : Ice.ObjectPrxHelperBase, ClientPrx
    {
        #region Synchronous operations

        public void receiveMessage(string sender, string message)
        {
            receiveMessage(sender, message, null, false);
        }

        public void receiveMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            receiveMessage(sender, message, context__, true);
        }

        private void receiveMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ClientDel_ del__ = (ClientDel_)delBase__;
                    del__.receiveMessage(sender, message, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void saludo()
        {
            saludo(null, false);
        }

        public void saludo(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            saludo(context__, true);
        }

        private void saludo(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ClientDel_ del__ = (ClientDel_)delBase__;
                    del__.saludo(context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<IClient.Callback_Client_receiveMessage> begin_receiveMessage(string sender, string message)
        {
            return begin_receiveMessage(sender, message, null, false, null, null);
        }

        public Ice.AsyncResult<IClient.Callback_Client_receiveMessage> begin_receiveMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_receiveMessage(sender, message, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_receiveMessage(string sender, string message, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_receiveMessage(sender, message, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_receiveMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_receiveMessage(sender, message, ctx__, true, cb__, cookie__);
        }

        private const string __receiveMessage_name = "receiveMessage";

        public void end_receiveMessage(Ice.AsyncResult r__)
        {
            end__(r__, __receiveMessage_name);
        }

        private Ice.AsyncResult<IClient.Callback_Client_receiveMessage> begin_receiveMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<IClient.Callback_Client_receiveMessage> result__ = new IceInternal.OnewayOutgoingAsync<IClient.Callback_Client_receiveMessage>(this, __receiveMessage_name, receiveMessage_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__receiveMessage_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(sender);
                os__.writeString(message);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void receiveMessage_completed__(IClient.Callback_Client_receiveMessage cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<IClient.Callback_Client_saludo> begin_saludo()
        {
            return begin_saludo(null, false, null, null);
        }

        public Ice.AsyncResult<IClient.Callback_Client_saludo> begin_saludo(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_saludo(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_saludo(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_saludo(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_saludo(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_saludo(ctx__, true, cb__, cookie__);
        }

        private const string __saludo_name = "saludo";

        public void end_saludo(Ice.AsyncResult r__)
        {
            end__(r__, __saludo_name);
        }

        private Ice.AsyncResult<IClient.Callback_Client_saludo> begin_saludo(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<IClient.Callback_Client_saludo> result__ = new IceInternal.OnewayOutgoingAsync<IClient.Callback_Client_saludo>(this, __saludo_name, saludo_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__saludo_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void saludo_completed__(IClient.Callback_Client_saludo cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ClientPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ClientPrx r = b as ClientPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ClientPrxHelper h = new ClientPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ClientPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ClientPrx r = b as ClientPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ClientPrxHelper h = new ClientPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ClientPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ClientPrxHelper h = new ClientPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ClientPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ClientPrxHelper h = new ClientPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ClientPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ClientPrx r = b as ClientPrx;
            if(r == null)
            {
                ClientPrxHelper h = new ClientPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ClientPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            ClientPrxHelper h = new ClientPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::IClient::Client",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new ClientDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new ClientDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, ClientPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static ClientPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                ClientPrxHelper result = new ClientPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace IServer
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ServerDel_ : Ice.ObjectDel_
    {
        void registerUser(string username, string password, string email, _System.Collections.Generic.Dictionary<string, string> context__);

        void loginUser(string username, string password, Ice.Identity client, _System.Collections.Generic.Dictionary<string, string> context__);

        void logoutUser(string username, _System.Collections.Generic.Dictionary<string, string> context__);

        void sendPrivateMessage(string sender, string destinatary, string message, _System.Collections.Generic.Dictionary<string, string> context__);

        void sendMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> context__);

        string[] chatParticipants(_System.Collections.Generic.Dictionary<string, string> context__);
    }
}

namespace IClient
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ClientDel_ : Ice.ObjectDel_
    {
        void saludo(_System.Collections.Generic.Dictionary<string, string> context__);

        void receiveMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> context__);
    }
}

namespace IServer
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerDelM_ : Ice.ObjectDelM_, ServerDel_
    {
        public string[] chatParticipants(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("chatParticipants", Ice.OperationMode.Normal, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string[] ret__;
                    ret__ = is__.readStringSeq();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void loginUser(string username, string password, Ice.Identity client, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("loginUser", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(username);
                    os__.writeString(password);
                    if(client == null)
                    {
                        Ice.Identity tmp__ = new Ice.Identity();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        client.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(IServer.InvalidLoggingException)
                        {
                            throw;
                        }
                        catch(IServer.UserAlreadyLoggedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void logoutUser(string username, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("logoutUser", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(username);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(IServer.UserNotLoggedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void registerUser(string username, string password, string email, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("registerUser", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(username);
                    os__.writeString(password);
                    os__.writeString(email);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(IServer.UserAlreadyExistsException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void sendMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("sendMessage", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(sender);
                    os__.writeString(message);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void sendPrivateMessage(string sender, string destinatary, string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("sendPrivateMessage", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(sender);
                    os__.writeString(destinatary);
                    os__.writeString(message);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace IClient
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ClientDelM_ : Ice.ObjectDelM_, ClientDel_
    {
        public void receiveMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("receiveMessage", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(sender);
                    os__.writeString(message);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void saludo(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("saludo", Ice.OperationMode.Normal, context__);
            try
            {
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace IServer
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ServerDelD_ : Ice.ObjectDelD_, ServerDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string[] chatParticipants(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "chatParticipants", Ice.OperationMode.Normal, context__);
            string[] result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Server servant__ = null;
                try
                {
                    servant__ = (Server)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.chatParticipants(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void loginUser(string username, string password, Ice.Identity client, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "loginUser", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Server servant__ = null;
                try
                {
                    servant__ = (Server)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.loginUser(username, password, client, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(IServer.InvalidLoggingException)
            {
                throw;
            }
            catch(IServer.UserAlreadyLoggedException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void logoutUser(string username, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "logoutUser", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Server servant__ = null;
                try
                {
                    servant__ = (Server)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.logoutUser(username, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(IServer.UserNotLoggedException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void registerUser(string username, string password, string email, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "registerUser", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Server servant__ = null;
                try
                {
                    servant__ = (Server)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.registerUser(username, password, email, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(IServer.UserAlreadyExistsException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void sendMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "sendMessage", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Server servant__ = null;
                try
                {
                    servant__ = (Server)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.sendMessage(sender, message, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void sendPrivateMessage(string sender, string destinatary, string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "sendPrivateMessage", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Server servant__ = null;
                try
                {
                    servant__ = (Server)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.sendPrivateMessage(sender, destinatary, message, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }
}

namespace IClient
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ClientDelD_ : Ice.ObjectDelD_, ClientDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void receiveMessage(string sender, string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "receiveMessage", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Client servant__ = null;
                try
                {
                    servant__ = (Client)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.receiveMessage(sender, message, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void saludo(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "saludo", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Client servant__ = null;
                try
                {
                    servant__ = (Client)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.saludo(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }
}

namespace IServer
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class ServerDisp_ : Ice.ObjectImpl, Server
    {
        #region Slice operations

        public void registerUser(string username, string password, string email)
        {
            registerUser(username, password, email, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void registerUser(string username, string password, string email, Ice.Current current__);

        public void loginUser(string username, string password, Ice.Identity client)
        {
            loginUser(username, password, client, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void loginUser(string username, string password, Ice.Identity client, Ice.Current current__);

        public void logoutUser(string username)
        {
            logoutUser(username, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void logoutUser(string username, Ice.Current current__);

        public void sendPrivateMessage(string sender, string destinatary, string message)
        {
            sendPrivateMessage(sender, destinatary, message, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void sendPrivateMessage(string sender, string destinatary, string message, Ice.Current current__);

        public void sendMessage(string sender, string message)
        {
            sendMessage(sender, message, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void sendMessage(string sender, string message, Ice.Current current__);

        public string[] chatParticipants()
        {
            return chatParticipants(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string[] chatParticipants(Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::IServer::Server",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus registerUser___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string username;
            username = is__.readString();
            string password;
            password = is__.readString();
            string email;
            email = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            try
            {
                obj__.registerUser(username, password, email, current__);
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(IServer.UserAlreadyExistsException ex__)
            {
                os__.writeUserException(ex__);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus loginUser___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string username;
            username = is__.readString();
            string password;
            password = is__.readString();
            Ice.Identity client;
            client = null;
            if(client == null)
            {
                client = new Ice.Identity();
            }
            client.read__(is__);
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            try
            {
                obj__.loginUser(username, password, client, current__);
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(IServer.InvalidLoggingException ex__)
            {
                os__.writeUserException(ex__);
                return Ice.DispatchStatus.DispatchUserException;
            }
            catch(IServer.UserAlreadyLoggedException ex__)
            {
                os__.writeUserException(ex__);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus logoutUser___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string username;
            username = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            try
            {
                obj__.logoutUser(username, current__);
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(IServer.UserNotLoggedException ex__)
            {
                os__.writeUserException(ex__);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus sendPrivateMessage___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string sender;
            sender = is__.readString();
            string destinatary;
            destinatary = is__.readString();
            string message;
            message = is__.readString();
            is__.endReadEncaps();
            obj__.sendPrivateMessage(sender, destinatary, message, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus sendMessage___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string sender;
            sender = is__.readString();
            string message;
            message = is__.readString();
            is__.endReadEncaps();
            obj__.sendMessage(sender, message, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus chatParticipants___(Server obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.istr().skipEmptyEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string[] ret__ = obj__.chatParticipants(current__);
            os__.writeStringSeq(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "chatParticipants",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "loginUser",
            "logoutUser",
            "registerUser",
            "sendMessage",
            "sendPrivateMessage"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return chatParticipants___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 5:
                {
                    return loginUser___(this, inS__, current__);
                }
                case 6:
                {
                    return logoutUser___(this, inS__, current__);
                }
                case 7:
                {
                    return registerUser___(this, inS__, current__);
                }
                case 8:
                {
                    return sendMessage___(this, inS__, current__);
                }
                case 9:
                {
                    return sendPrivateMessage___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type IServer::Server was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type IServer::Server was not generated with stream support";
            throw ex;
        }

        #endregion
    }
}

namespace IClient
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class ClientDisp_ : Ice.ObjectImpl, Client
    {
        #region Slice operations

        public void saludo()
        {
            saludo(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void saludo(Ice.Current current__);

        public void receiveMessage(string sender, string message)
        {
            receiveMessage(sender, message, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void receiveMessage(string sender, string message, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::IClient::Client",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus saludo___(Client obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.istr().skipEmptyEncaps();
            obj__.saludo(current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus receiveMessage___(Client obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string sender;
            sender = is__.readString();
            string message;
            message = is__.readString();
            is__.endReadEncaps();
            obj__.receiveMessage(sender, message, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "receiveMessage",
            "saludo"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 4:
                {
                    return receiveMessage___(this, inS__, current__);
                }
                case 5:
                {
                    return saludo___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type IClient::Client was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type IClient::Client was not generated with stream support";
            throw ex;
        }

        #endregion
    }
}
