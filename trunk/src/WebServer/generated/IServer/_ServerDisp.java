// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_ServerDisp.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IServer;

public abstract class _ServerDisp extends Ice.ObjectImpl implements Server
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::IServer::Server",
        "::Ice::Object"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[0];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String
    ice_staticId()
    {
        return __ids[0];
    }

    public final java.util.List<java.lang.String>
    chatParticipants()
    {
        return chatParticipants(null);
    }

    public final void
    loginUser(String username, String password, Ice.Identity client)
        throws InvalidLoggingException,
               UserAlreadyLoggedException
    {
        loginUser(username, password, client, null);
    }

    public final void
    logoutUser(String username)
        throws UserNotLoggedException
    {
        logoutUser(username, null);
    }

    public final void
    registerUser(String username, String password, String email)
        throws UserAlreadyExistsException
    {
        registerUser(username, password, email, null);
    }

    public final void
    sendMessage(String sender, String message)
    {
        sendMessage(sender, message, null);
    }

    public final void
    sendPrivateMessage(String sender, String destinatary, String message)
    {
        sendPrivateMessage(sender, destinatary, message, null);
    }

    public static Ice.DispatchStatus
    ___registerUser(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String username;
        username = __is.readString();
        String password;
        password = __is.readString();
        String email;
        email = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            __obj.registerUser(username, password, email, __current);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(UserAlreadyExistsException ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___loginUser(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String username;
        username = __is.readString();
        String password;
        password = __is.readString();
        Ice.Identity client;
        client = new Ice.Identity();
        client.__read(__is);
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            __obj.loginUser(username, password, client, __current);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(InvalidLoggingException ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
        catch(UserAlreadyLoggedException ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___logoutUser(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String username;
        username = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            __obj.logoutUser(username, __current);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(UserNotLoggedException ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___sendPrivateMessage(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String sender;
        sender = __is.readString();
        String destinatary;
        destinatary = __is.readString();
        String message;
        message = __is.readString();
        __is.endReadEncaps();
        __obj.sendPrivateMessage(sender, destinatary, message, __current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___sendMessage(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String sender;
        sender = __is.readString();
        String message;
        message = __is.readString();
        __is.endReadEncaps();
        __obj.sendMessage(sender, message, __current);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___chatParticipants(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        java.util.List<java.lang.String> __ret = __obj.chatParticipants(__current);
        if(__ret == null)
        {
            __os.writeSize(0);
        }
        else
        {
            __os.writeSize(__ret.size());
            for(String __elem : __ret)
            {
                __os.writeString(__elem);
            }
        }
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "chatParticipants",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "loginUser",
        "logoutUser",
        "registerUser",
        "sendMessage",
        "sendPrivateMessage"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___chatParticipants(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___loginUser(this, in, __current);
            }
            case 6:
            {
                return ___logoutUser(this, in, __current);
            }
            case 7:
            {
                return ___registerUser(this, in, __current);
            }
            case 8:
            {
                return ___sendMessage(this, in, __current);
            }
            case 9:
            {
                return ___sendPrivateMessage(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type IServer::Server was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type IServer::Server was not generated with stream support";
        throw ex;
    }
}
